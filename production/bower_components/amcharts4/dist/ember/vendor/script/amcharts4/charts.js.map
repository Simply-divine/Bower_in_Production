{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack:///../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack:///../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack:///../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///./charts.js"],"names":["DateAxisBreak_DateAxisBreak","_super","DateAxisBreak","_this","call","this","className","applyTheme","tslib_es6","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","startValue","getTime","axis","invalidate","invalidateSeries","endValue","ValueAxisBreak","Registry","registeredClasses","DateAxis_DateAxisDataItem","DateAxisDataItem","values","date","endDate","dates","setDate","ValueAxis","DateAxis_DateAxis","DateAxis","gridIntervals","List","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","snapTooltip","tooltipPosition","pushAll","axisFieldName","fillRule","dataItem","component","gridInterval","_gridInterval","gridDuration","Time","Math","round","min","axisFill","__disabled","applyInternalDefaults","hasKey","setKey","language","translate","createDataItem","createAxisBreak","validateDataItems","start","end","periodCount","max","baseDuration","maxZoomFactor","_deltaMinMax","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","adjustDifference","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","getFirstWeekDay","dateFormatter","utc","_nextGridUnit","_intervalDuration","ceil","_difference","floor","Iterator","series","iterator","baseAxis","field_1","getAxisField","minZoomed","minZoomedStr","toString","startDataItem","dataItemsByAxis","getKey","uid","startIndex","findFirst","index","dataItems","findClosestIndex","x","maxZoomed","maxZoomedStr","endDataItem","endIndex","length","dataRangeInvalid","validateDataRange","time","key","previousDataItem","getIndex","previousDate","validateData","Type","minDifference","Number","MAX_VALUE","each","seriesDataChangeUpdate","postProcessSeriesDataItems","JSON","stringify","_baseInterval","postProcessSeriesDataItem","addEmptyUnitsBreaks","utils_Object","getDate","startTime","setCalculatedValue","skipEmptyPeriods","axisBreaks","clear","axisBreak","this_1","startTimeStr","undefined","create","startDate","fixAxisBreaks","breakGridCount","endPosition","startPosition","adjustedEndValue","adjustedStartValue","gridDate","firstDayOfWeek","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","isInBreak","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","resetIterators","this_2","format","markUnitChange","text","find","appendDataItem","validateDataElement","renderer_1","renderer","breakSize","timeUnit_1","intervalCount_1","utils_Math","startPoint","endPoint","minGridDistance","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","position","valueToPosition","fillEndPosition","isRange","tick","disabled","updateTickElement","grid","updateGridElement","fill","updateFillElement","mask","label","location_1","location","updateLabelElement","adjustMinMax","step","fixMin","startLocation","fixMax","endLocation","duration","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","anyToPosition","dateToPoint","point","positionToPoint","angle","positionToAngle","y","anyToPoint","valueToPoint","positionToDate","positionToValue","getX","getTimeByLocation","baseValue","getY","stack","getValue","getAngle","stackKey","workingLocations","endTime","processSeriesDataItem","axisLetter","openTime","openDate","prevSeriesTime","_prevSeriesTime","difference","abs","differece","updateAxisBySeries","timeInterval","invalidateData","breakTemplate","template","startLine","endLine","fillShape","getTooltipText","tooltipDateFormat","dateFormat","getPositionLabel","adapter","apply","roundPosition","getCellStartPosition","getCellEndPosition","getSeriesDataItem","findNearest","key_1","Infinity","getCurrentLabelFormat","initRenderer","ticks","labels","baseGrid","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","asIs","field","copyFrom","source","showTooltipAtPosition","local","toAxisPosition","closestDate_1","actualTime_1","xAxis","dateX","yAxis","dateY","closestTime_1","tooltipLocation","showTooltipAtDataItem","chart","_seriesPoints","push","tooltipText","tooltipHTML","hideTooltip","makeGap","previous","connect","autoGapCount","CategoryAxisBreak_CategoryAxisBreak","CategoryAxisBreak","indexToPosition","invalidateDataItems","category","categoryToIndex","AxisBreak","CategoryAxis_CategoryAxisDataItem","CategoryAxisDataItem","Adapter","seriesDataItems","locations","endCategory","isEnabled","properties","setProperty","Axis","CategoryAxis_CategoryAxis","CategoryAxis","dataItemsByCategory","_lastDataItem","_disposers","categoryAxisDataItem","seriesId","_series","invalidateDataRange","positionToIndex","minIndex","maxIndex","i","axisDataItem","i_1","seriesDataItem","validate","dataCount","invalid","maxCount","axisLength","frequency","_startIndex","_endIndex","_frequency","itemIndex","len","frequency_1","itemIndex_1","b","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","fillEndIndex","fillPosition","AxisRendererY","measuredWidth","AxisRendererX","measuredHeight","html","currentText","disposeData","processDataItem","dataContext","getDataItem","dataFields","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","getFirstSeriesDataItem","categoryX","categoryY","getLastSeriesDataItem","index_1","sdi_1","category_1","categories","basePoint","breakStartPosition","breakEndPosition","breakPosition","positionToCategory","XYSeries_XYSeriesDataItem","XYSeriesDataItem","valueX","valueY","openValueX","openValueY","openDateX","openDateY","setLocation","setValue","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","utils_Array","getWorkingValue","getMax","Series","XYSeries_XYSeries","XYSeries","_xAxis","Disposer","_yAxis","_xValueFields","_yValueFields","isMeasured","cursorTooltipEnabled","cursorHoverEnabled","excludeFromTotal","mainContainer","Sprite","setElement","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","readerTitle","dataChangeUpdate","_tmin","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","Error","name","disable","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","updateDataItem","dataItemsX","clearCatAxis","dataItemsY","xAxisFieldName","xField","xOpenField","Utils","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","axisRanges","range","fillPath","path","Path","width","height","pixelY","pixelX","_showBullets","minBulletDistance","get","xAxes","oldAxis","removeKey","dispose","removeValue","set","registerSeries","yAxes","_baseAxis","processValues","minX","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","isDisposed","dispatchImmediately","appeared","_prevTooltipDataItem","xPosition","yPosition","visible","isHiding","isShowing","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","target","_a","sprites","_b","next","done","sprite","parent","isHidden","isHover","showTooltip","shouldCreateBullet","bulletTemplate","hasValue","disabledField","propertyFields","positionBullet","bullet","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","locationX","locationY","moveTo","bulletLocation","show","anim","delay","interpolationDuration","defaultState","transitionDuration","a","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","hide","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","backwards","prevSeries","prevDataItem","prevValue","prevRealValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","processingErrors","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","Cursor_Cursor","Cursor","_stick","Percent","shouldClone","trackable","clickable","interaction","Interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","event","interactionsEnabled","interactions","isTouchProtected","touch","_generalBehavior","downPoint","isLocalElement","pointer","svg","_stickPoint","fitsToBounds","triggerMove","hideReal","stick","triggerMoveReal","invalidatePosition","getPositions","dispatch","triggerDown","triggerDownReal","setGlobalStyle","Mouse","grabbing","triggerUp","triggerUpReal","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","default","updateSelection","innerWidth","innerHeight","cancelable","shouldPreventGestures","preventDefault","plotContainer","lockElement","Container","XYCursor_XYCursor","XYCursor","_lineX","_lineY","behavior","maxPanOut","interfaceColors","InterfaceColorSet","selection","createChild","fillOpacity","getFor","lineX","stroke","Color","strokeDasharray","strokeOpacity","lineY","updateSize","_usesSelection","w","_positionPrecision","h","pixelHeight","pixelWidth","validatePosition","fixPoint","snapToSeries","updateLinePositions","getPanningRanges","selectionX","selectionY","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","_snapToDisposer","handleSnap","opposite","xx","yy","animationDuration","easing","animationEasing","animate","property","to","XYChartScrollbar_XYChartScrollbar","XYChartScrollbar","padding","scrollbarChart","XYChart_XYChart","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","newValue","zoomOutButton","addXAxis","addYAxis","clone","title","rangeChangeDuration","id","inside","line","minLabelPosition","maxLabelPosition","axisFills","clonedFrom","showOnInit","zoomOutAxes","filters","DesaturateFilter","updateByOrientation","orientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","Scrollbar","XYChart_XYChartDataItem","XYChartDataItem","SerialChart","XYChart","_axisRendererX","_axisRendererY","maskBullets","arrangeTooltips","chartContainer","layout","topAxesCont","zIndex","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","bulletsContainer","ZoomOutButton","align","valign","MAX_SAFE_INTEGER","marginTop","marginRight","_bulletMask","exportable","draw","toFront","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","observe","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","processRenderer","_dataUsers","gridContainer","breakContainer","addDisposer","dataUsers","inited","updateSeriesMasks","_xAxes","handleAxisRemoval","autoDispose","_yAxes","removeFromInvalidComponents","dataInvalid","colors","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","createCursor","showSeriesTooltip","exceptAxis","showAxisTooltip","sortSeriesTooltips","hideObjectTooltip","seriesPoints","setBounds","topLeft","bottomRight","sum","filteredSeriesPoints","seriesPoint","sort","averageY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","pixelMarginTop","nextY","pixelMarginBottom","except","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","axisRange","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","declination","realRange","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","maxWidth","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","createSeries","_zoomOutButton","button","addData","rawDataItem","removeCount","addScrollbarData","removeScrollbarData","remove","dataUser","removeData","handleTapToActivate","handleTapToActivateDeactivation","Responsive","relevant","maybeXS","state","stateId","LineSeriesSegment_LineSeriesSegment","LineSeriesSegment","fillSprite","strokeSprite","drawSegment","points","closePoints","smoothnessX","smoothnessY","Smoothing","smooth","lineElement","fillElement","LineSeries_LineSeriesDataItem","LineSeriesDataItem","LineSeries_LineSeries","LineSeries","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","tensionX","tensionY","segmentsContainer","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","openIndex","params","openSegment","addToClose","closeIndex","propertiesChanged","getFirst","contents","valuesFound","hasProperties","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","Line","x2","Rectangle","legendDataItem","color","colorOrig","bullets","Bullet","copyToLegendMarker","hasLabels","children","child","Label","RadarSeries_RadarSeriesDataItem","RadarSeriesDataItem","RadarSeries_RadarSeries","RadarSeries","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","RadarCursor_RadarCursor","RadarCursor","innerRadius","truePixelRadius","updateLineX","updateLineY","fillStartAngle","arc","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","sin","cos","upAngle","upRadius","setPercentProperty","innerRadiusModifyer","AxisFillCircular_AxisFillCircular","AxisFillCircular","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","useChartAngles","setAxis","atan2","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","fixPosition","invalidateAxisItems","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","gridType","axisAngle","horizontalCenter","verticalCenter","rotation","gridLocation","count_1","cellEndLocation","positionItem","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","bigNum","axisFullLength","RadarChart_RadarChartDataItem","RadarChartDataItem","RadarChart_RadarChart","RadarChart","radarContainer","Circle","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","_pixelInnerRadius","definedBBox","ClockHand_ClockHand","ClockHand","_axis","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","x1","_pin","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","updateValue","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","processHand","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","depthValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","slice","depth","depthPercent","percent","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","FlowDiagramNode_FlowDiagramNode","FlowDiagramNode","legendSettings","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","outgoingDataItems","toNode","incomingDataItems","fromNode","link","colorMode","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","utils_String","fromName","Order","utils_Number","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","removeChildren","column","RoundedRectangle","_legendDataItem","itemContainer","deepInvalidate","FlowDiagramLink_FlowDiagramLink","FlowDiagramLink","positionBullets","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","measureElement","_bullets","Polyline","getTooltipX","getTooltipY","LinearGradient","FlowDiagram_FlowDiagramDataItem","FlowDiagramDataItem","toName","_link","link_1","links","addSprite","Chart","FlowDiagram_FlowDiagram","FlowDiagram","ColorSet","nodePadding","minNodeSize","linksContainer","nodesContainer","nodes","sortNodes","low","high","node","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","feedLegend","_sorted","sortedIterator","total","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","_links","createLink","legend","legendData_1","LabelBullet_LabelBullet","LabelBullet","truncate","hideOversized","handleMaxSize","SankeyNode_SankeyNode","SankeyNode","nextInCoord","nextOutCoord","nameLabel","valueLabel","orientation_1","dx","dy","linkWidth","valueHeight","SankeyLink_SankeyLink","SankeyLink","tension","controlPointDistance","Polyspline","isTemplate","y0","y1","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","SankeyDiagram_SankeyDiagramDataItem","SankeyDiagramDataItem","SankeyDiagram_SankeyDiagram","SankeyDiagram","nodeAlign","_levelCount","level","getNodeLevel","levels","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","err","Animation","from","container","nextCoordinate","levelCoordinate","nodeCount","showReal","container_1","interpolationEasing","nodeHeight","_valueHeight","ChordNode_ChordNode","ChordNode","updateRotation","Slice","ix","iy","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve_QuadraticCurve","QuadraticCurve","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","ChordDiagram_ChordDiagram","ChordDiagram","chordContainer","newTotal","Column_Column","Column","createAssets","handleKidAdded","ColumnSeries_ColumnSeriesDataItem","ColumnSeriesDataItem","_column","setColumn","columns","_rangesColumns","ColumnSeries_ColumnSeries","ColumnSeries","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","clusterCount","cellStartLocation","disableUnusedColumns","validateDataElementReal","getStartLocation","simplifiedProcessing","getEndLocation","l","r","t","percentHeight","pixelPaddingLeft","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","offset","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","axisLenght","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","ev","populateString","realX","realY","realWidth","realHeight","virtualParent","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","open_1","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","createColumnTemplate","fromOpenState_1","fromPreviousState_1","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","toValue","TreeMapSeries_TreeMapSeries","TreeMapSeries","configField","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","hasChildren","getDuration","childValue","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","_homeText","getMinMax","layoutItems","_updateDataItemIndexes","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","setData","currentlyZoomed","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateLayout","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleDataItemValueChange","getLegendLevel","legendParent","getExporting","exporting","info","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","Column3D_Column3D","Column3D","column3D","Rectangle3D","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","fixLayout","fixColumns","depthIndex","s","inversed_1","maskColumns","Candlestick_Candlestick","Candlestick","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","noRisers","vertical","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","prevPoint","point0","RadarColumn_RadarColumn","RadarColumn","radarColumn","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","FunnelSlice_FunnelSlice","FunnelSlice","bottomWidth","topWidth","expandDistance","pt","pb","pr","pl","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","FunnelTick_FunnelTick","FunnelTick","_label","_slice","labelsOpposite","maxRight","p0","maxBottom","Tick","FunnelSeries_FunnelSeriesDataItem","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","slicesContainer","PercentSeries","FunnelSeries_FunnelSeries","FunnelSeries","_nextY","labelsContainer","bottomRatio","createTick","initSlice","scale","handleSliceScale","handleSliceMove","initLabel","labelTemplate","alignLabels","dItem","_total","_count","arrangeLabels","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","linkHeight","lastLabel","lastY","lastX","_sliceLinks","setAlignLabels","labelAlign","labelValign","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","PyramidSeries_PyramidSeries","PyramidSeries","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","ticksContainer","pyramidWidth","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","slices","hs","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","radiusY","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","DurationAxis_DurationAxisDataItem","DurationAxisDataItem","DurationAxis_DurationAxis","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","_linksIterator","triangle","Triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","Component","window","am4charts","charts_namespaceObject"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.max(-5, Math.floor(this.start * count) - 3); // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(new Date(this._minZoomed), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr);\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\") + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\r\n\t\t\t\tif(series.dataRangeInvalid){\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.baseInterval)) {\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tseries._baseInterval[this.uid] = this.baseInterval;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.dateFormatter.utc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this.dateFormatter) {\r\n\t\t\treturn this.dateFormatter.firstDayOfWeek;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this.dateFormatter.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this.dateFormatter.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this.dateFormatter.utc).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._baseInterval) {\r\n\t\t\t\tseries._baseInterval[this.uid] = this._baseInterval;\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif(baseInterval.timeUnit == \"month\"){\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\t\t\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tif(!$type.isNumber(timeInterval.count)){\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this.dateFormatter.utc);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\tlet actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif(tooltipLocation == 0){\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime.toString());\r\n\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet time = dataItem.dates[\"date\" + this.axisLetter].getTime();\r\n\t\t\t\t\tlet prevTime = previous.dates[\"date\" + this.axisLetter].getTime();\r\n\r\n\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties.category);\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\r\n\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (categoryAxisDataItem) {\r\n\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\tif (!seriesDataItems) {\r\n\t\t\t\tseriesDataItems = [];\r\n\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t}\r\n\t\t\tseriesDataItems.push(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\t\t\t\t\t\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t//}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dataItems.create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif(position > 1){\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif(index >= this.dataItems.length){\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis.y = this.yAxis.pixelY;\r\n\t\tthis.x = this.xAxis.pixelX;\r\n\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t\tpublic positionBullet(bullet: Bullet) {\r\n\t\t\tsuper.positionBullet(bullet);\r\n\t\r\n\t\t\tlet dataItem:XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\t\r\n\t\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\t\tlet xField: string = bullet.xField;\r\n\t\t\tif (!$type.hasValue(xField)) {\r\n\t\t\t\txField = this.xField;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet yField: string = bullet.yField;\r\n\t\t\tif (!$type.hasValue(yField)) {\r\n\t\t\t\tyField = this.yField;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\t\r\n\t\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\r\n\t\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\t\tlet positionX:number;\r\n\t\t\t\t\tlet positionY:number;\r\n\t\t\t\r\n\t\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\t\r\n\t\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\r\n\t\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t\t}\t\r\n\t\r\n\t\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\t\r\n\t\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\r\n\t\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tbullet.visible = true;\r\n\t\r\n\t\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX).x;\r\n\t\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY).y;\r\n\t\t}\r\n\t*/\r\n\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.selection.hide(0);\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(){\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t this.scrollbarChart.xAxes.each((xAxis)=>{\r\n\t\t\t \tif(xAxis.clonedFrom == sourceSeries.xAxis){\r\n\t\t\t \t\tseries.xAxis = xAxis;\r\n\t\t\t \t}\r\n\t\t\t })\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\t\t\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t this.scrollbarChart.yAxes.each((yAxis)=>{\r\n\t\t\t \tif(yAxis.clonedFrom == sourceSeries.yAxis){\r\n\t\t\t \t\tseries.yAxis = yAxis;\r\n\t\t\t \t}\r\n\t\t\t })\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\t\t\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._seriesPoints = [];\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif(dataItem){\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound:boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n/*\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\r\n\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\r\n\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\r\n\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\tbullet.y = $math.sin(angle) * radius;\r\n\t}\t*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer(){\r\n\t\tif(!this._bulletsContainer){\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask(){\r\n\t\tif(!this._bulletsMask){\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif(color instanceof Color){\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false;\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif(middleLine){\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tgetTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tgetTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient(){\r\n\t\tif(!this._gradient){\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link:FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif(this._parseDataFrom == 0){\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif(!node.dataItem.visible){\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"], name?:string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes():DictionaryTemplate<string, this[\"_node\"]>{\r\n\t\tif(!this._nodes){\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event)=>{\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links():ListTemplate<this[\"_link\"]>{\r\n\t\tif(!this._links){\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node)=>{\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/FlowDiagram.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/LabelBullet.ts","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyNode.ts","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyLink.ts","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\t//@todo solve circular so\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\t\t\tvalue = value * availableHeight / (availableHeight - (this._levelNodesCount[key] - 1) * this.nodePadding);\r\n\r\n\t\t\tif (this.maxSum < value) {\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SankeyDiagram.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif(treeMapDataItem){\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif(treeMapDataItem){\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\t\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif(treeMapDataItem){\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it wont' be shown\r\n\t\tif(zoomOutButton){\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\treturn this.getLegendLevel(dataItem.children.getIndex(0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif(inversed){\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\t\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\t\t\t\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n/*\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\r\n\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\r\n\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\r\n\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\tbullet.y = $math.sin(angle) * radius;\r\n\t}*/\r\n\r\n/*\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem:RadarColumnSeriesDataItem = <RadarColumnSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\t\t\tlet angle:number;\r\n\t\t\t\tlet radius:number;\r\n\r\n\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\tlet position:number;\r\n\t\t\r\n\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\r\n\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\r\n\t\t\t\t\tposition = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\tposition = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tlet renderer:AxisRendererCircular = <AxisRendererCircular>xAxis.renderer;\r\n\r\n\t\t\t\tangle = renderer.positionToAngle(position);\r\n\r\n\t\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\r\n\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\r\n\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\r\n\t\t\t\t\tpoint = yAxis.valueToPoint(middleValue);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\tpoint = yAxis.categoryToPoint((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tradius = $math.getDistance(point);\r\n\t\t\t\t\r\n\t\t\t\tbullet.moveTo({x:radius * $math.cos(angle), y:radius * $math.sin(angle)});\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelSlice.ts","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelTick.ts","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += dItem.getWorkingValue(\"value\") / dItem.value;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotal += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\t// FunnelSlice\r\n\t\t\tlet slice = dataItem.slice;\r\n\t\t\tslice.orientation = this.orientation;\r\n\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\r\n\t\t\tsliceLink.fill = slice.fill;\r\n\r\n\t\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\t\tsliceLink.disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value > 0) {\r\n\t\t\td = workingValue / dataItem.value;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = $math.max(0, maxHeight / this._count * d / this._total - linkHeight);\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = maxWidth / this._count * d * 1 / this._total - linkWidth;\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tlet lastLabel = this.labels.getIndex(count - 1);\r\n\r\n\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\tif (count > 1) {\r\n\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY - label.measuredHeight;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX - label.measuredWidth;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/FunnelSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}